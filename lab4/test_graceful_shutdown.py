#!/usr/bin/env python3

import requests
import time
import json
import subprocess
import signal
import threading

def send_analyze_request(text, request_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        response = requests.post('http://localhost:8080/analyze', 
                               json={'text': text}, 
                               timeout=15)
        print(f"üîÑ Request {request_id}: {response.status_code} - {response.json()}")
        return response.json()
    except Exception as e:
        print(f"‚ùå Request {request_id} failed: {e}")
        return None

def monitor_workers():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç–∞—Ç—É—Å worker'–æ–≤"""
    try:
        response = requests.get('http://localhost:8080/workers/status', timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"\nüìä Workers Status:")
            print(f"   Total: {data['total_workers']}, Active: {data['active_workers']}, Shutting down: {data['shutting_down_workers']}")
            
            for worker_id, info in data['workers'].items():
                status_emoji = "üü¢" if info['is_responsive'] else "üî¥"
                current_task = f"(task: {info['current_task']})" if info['current_task'] else ""
                print(f"   {status_emoji} {worker_id}: {info['status']} {current_task}")
        else:
            print(f"‚ùå Failed to get workers status: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Monitor error: {e}")

def load_generator():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É"""
    texts = [
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã graceful shutdown",
        "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤",
        "Lorem ipsum dolor sit amet consectetur adipiscing elit",
        "–°–∏—Å—Ç–µ–º—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å shutdown",
        "–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"
    ]
    
    request_id = 1
    while True:
        try:
            text = texts[(request_id - 1) % len(texts)]
            threading.Thread(target=send_analyze_request, 
                           args=(f"{text} (request #{request_id})", request_id)).start()
            request_id += 1
            time.sleep(2)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        except KeyboardInterrupt:
            print("\nüõë Load generator stopped")
            break

def main():
    print("üöÄ Testing Graceful Shutdown")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
    try:
        response = requests.get('http://localhost:8080/health', timeout=5)
        if response.status_code != 200:
            print("‚ùå Gateway not responding, please start services first")
            return
        print("‚úÖ Gateway is running")
    except:
        print("‚ùå Cannot connect to gateway, please start services first")
        return
    
    print("\nüìä Initial workers status:")
    monitor_workers()
    
    print(f"\nüîÑ Starting load generation...")
    print("   Sending requests every 2 seconds")
    print("   While load is running, try these commands in another terminal:")
    print("   docker-compose stop worker  # Graceful shutdown")
    print("   docker-compose up -d --scale worker=3  # Scale up")
    print("   docker-compose up -d --scale worker=1  # Scale down")
    print("\n   Press Ctrl+C to stop load generation")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def monitor_loop():
        while True:
            time.sleep(5)
            monitor_workers()
    
    monitor_thread = threading.Thread(target=monitor_loop, daemon=True)
    monitor_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏
    try:
        load_generator()
    except KeyboardInterrupt:
        print("\nüëã Test completed")

if __name__ == '__main__':
    main() 