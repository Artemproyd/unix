#!/usr/bin/env python3
import requests
import json
import time
import threading
import random
from concurrent.futures import ThreadPoolExecutor, as_completed

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
TEST_URLS = [
    "https://www.google.com",
    "https://github.com/user/repo",
    "https://stackoverflow.com/questions/123",
    "https://www.youtube.com/watch?v=abc123",
    "https://facebook.com/page",
    "https://twitter.com/user",
    "https://linkedin.com/in/user",
    "https://instagram.com/user",
    "http://suspicious-site.tk/malware",
    "https://example.com/very/long/path/with/many/segments",
    "https://test.com?param1=value1&param2=value2&param3=value3",
    "https://192.168.1.1:8080/admin",
    "https://sub.domain.example.org/path",
    "https://–æ—á–µ–Ω—å-–¥–ª–∏–Ω–Ω—ã–π-–¥–æ–º–µ–Ω-—Å-–∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π.—Ä—Ñ/–ø—É—Ç—å"
]

BASE_URL = "http://localhost:5000"

def send_request(url):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ URL"""
    try:
        start_time = time.time()
        
        response = requests.post(
            f"{BASE_URL}/analyze_url",
            json={"url": url},
            timeout=35
        )
        
        end_time = time.time()
        response_time = end_time - start_time
        
        return {
            "url": url,
            "status_code": response.status_code,
            "response_time": response_time,
            "success": response.status_code == 200,
            "error": None if response.status_code == 200 else response.text
        }
    except Exception as e:
        return {
            "url": url,
            "status_code": 0,
            "response_time": 0,
            "success": False,
            "error": str(e)
        }

def get_queue_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
    try:
        response = requests.get(f"{BASE_URL}/queue_status", timeout=5)
        if response.status_code == 200:
            return response.json()
    except:
        pass
    return {"queue_length": "unknown", "pending_results": "unknown"}

def load_test(num_requests=50, num_threads=10):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {num_requests}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {num_threads}")
    print(f"   –¶–µ–ª–µ–≤–æ–π URL: {BASE_URL}")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    try:
        health_response = requests.get(f"{BASE_URL}/health", timeout=5)
        if health_response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
        print("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_urls = [random.choice(TEST_URLS) for _ in range(num_requests)]
    
    results = []
    start_time = time.time()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        future_to_url = {executor.submit(send_request, url): url for url in test_urls}
        
        completed = 0
        for future in as_completed(future_to_url):
            result = future.result()
            results.append(result)
            completed += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
            if completed % 10 == 0 or completed == num_requests:
                queue_status = get_queue_status()
                print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}/{num_requests} | "
                      f"–û—á–µ—Ä–µ–¥—å: {queue_status['queue_length']} | "
                      f"–û–∂–∏–¥–∞—é—â–∏–µ: {queue_status['pending_results']}")
    
    end_time = time.time()
    total_time = end_time - start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    if successful:
        response_times = [r['response_time'] for r in successful]
        avg_response_time = sum(response_times) / len(response_times)
        min_response_time = min(response_times)
        max_response_time = max(response_times)
    else:
        avg_response_time = min_response_time = max_response_time = 0
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫")
    print(f"–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {num_requests/total_time:.2f}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful)}/{num_requests} ({len(successful)/num_requests*100:.1f}%)")
    print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(failed)}")
    
    if successful:
        print(f"\n–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {avg_response_time:.2f} —Å–µ–∫")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min_response_time:.2f} —Å–µ–∫")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_response_time:.2f} —Å–µ–∫")
    
    if failed:
        print(f"\n–û—à–∏–±–∫–∏:")
        error_types = {}
        for f in failed:
            error = f['error'] or f"HTTP {f['status_code']}"
            error_types[error] = error_types.get(error, 0) + 1
        
        for error, count in error_types.items():
            print(f"  {error}: {count}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
    final_queue_status = get_queue_status()
    print(f"\n–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:")
    print(f"  –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {final_queue_status['queue_length']}")
    print(f"  –û–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {final_queue_status['pending_results']}")

def stress_test():
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""
    print("üî• –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 50)
    
    test_configs = [
        (10, 2),   # 10 –∑–∞–ø—Ä–æ—Å–æ–≤, 2 –ø–æ—Ç–æ–∫–∞
        (25, 5),   # 25 –∑–∞–ø—Ä–æ—Å–æ–≤, 5 –ø–æ—Ç–æ–∫–æ–≤
        (50, 10),  # 50 –∑–∞–ø—Ä–æ—Å–æ–≤, 10 –ø–æ—Ç–æ–∫–æ–≤
        (100, 20), # 100 –∑–∞–ø—Ä–æ—Å–æ–≤, 20 –ø–æ—Ç–æ–∫–æ–≤
    ]
    
    for requests_count, threads_count in test_configs:
        print(f"\nüß™ –¢–µ—Å—Ç: {requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤, {threads_count} –ø–æ—Ç–æ–∫–æ–≤")
        load_test(requests_count, threads_count)
        print("\n–û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
        time.sleep(5)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "stress":
            stress_test()
        elif sys.argv[1] == "quick":
            load_test(20, 5)
        else:
            try:
                requests = int(sys.argv[1])
                threads = int(sys.argv[2]) if len(sys.argv) > 2 else 10
                load_test(requests, threads)
            except:
                print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python load_test.py [stress|quick|<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø—Ä–æ—Å–æ–≤> [<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ—Ç–æ–∫–æ–≤>]]")
    else:
        load_test()  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ—Å—Ç: 50 –∑–∞–ø—Ä–æ—Å–æ–≤, 10 –ø–æ—Ç–æ–∫–æ–≤ 